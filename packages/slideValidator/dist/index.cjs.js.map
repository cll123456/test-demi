{"version":3,"file":"index.cjs.js","sources":["../utils/index.ts","../component.ts"],"sourcesContent":["import { computed, ComputedRef } from 'vue-demi'\r\n\r\n/**\r\n * 判断传入参数是否是一个标准的长度单位， 'px', 'vw', 'px', 'vh', '%' 结尾\r\n * @param lengthStr 传入的长度\r\n * @param extraUnit  额外需要添加的单位\r\n * @returns 返回一个正常的度量单位\r\n */\r\n\r\nexport function useLengthUnit(lengthStr: string, extraUnit = 'px'):ComputedRef<string> {\r\n  return computed(() => {\r\n    // 判断数字或者小数，默认加上px\r\n    if (/^[1-9][0-9]*([.][0-9]{1,})?$/.test(lengthStr.toString())) {\r\n      return lengthStr + extraUnit;\r\n    } else {\r\n      // 判断是否以常用的css单位结尾\r\n      const cssArr: string[] = ['px', 'vw', 'px', 'vh', '%'];\r\n      return cssArr.some(ca => lengthStr.toString().endsWith(ca)) ? lengthStr : parseInt(lengthStr.toString()) + extraUnit\r\n    }\r\n  })\r\n}\r\n\r\n\r\n/**\r\n * 验证是否是颜色\r\n * @param val \r\n * @returns \r\n */\r\nexport function useValidateIsColor(val: string):boolean {\r\n  return /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(val);\r\n}\r\n\r\n/**\r\n * 获取随机数\r\n * @returns \r\n */\r\nexport function useGetUuid():string {\r\n  return Date.now() + '-' + Math.random().toString(16).slice(2, 7) + '-' + Math.random().toString(16).slice(2, 7)\r\n}","/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport { defineComponent, PropType, h, ref, onMounted, Ref, install } from 'vue-demi';\r\nimport * as CSS from 'csstype'\r\nimport { useLengthUnit, useValidateIsColor } from './utils/index'\r\n\r\ninterface CSSProperties extends CSS.Properties<string | number> {\r\n  /**\r\n   * The index signature was removed to enable closed typing for style\r\n   * using CSSType. You're able to use type assertion or module augmentation\r\n   * to add properties or an index signature of your own.\r\n   *\r\n   * For examples and more information, visit:\r\n   * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\r\n   */\r\n}\r\n\r\ntype StyleValue = CSSProperties | Array<StyleValue>\r\n\r\ninstall();\r\n\r\nexport default defineComponent({\r\n  name: 'SlideValidator',\r\n  props: {\r\n    /**\r\n     * 背景颜色\r\n     */\r\n    backgroundColor: {\r\n      type: String,\r\n      validator: (val: string) => useValidateIsColor(val),\r\n      default: '#abcdef'\r\n    },\r\n    /**\r\n     * 成功的背景颜色\r\n     */\r\n    successBgColor: {\r\n      type: String,\r\n      validator: (val: string) => useValidateIsColor(val),\r\n      default: '#abcdef'\r\n    },\r\n    /**\r\n     * 宽度\r\n     */\r\n    width: {\r\n      type: String || Number,\r\n      default: '100%'\r\n    },\r\n    /**\r\n     * 高度\r\n     */\r\n    height: {\r\n      type: String || Number,\r\n      default: '50px'\r\n    },\r\n    /**\r\n     * 滑块内部描述文字\r\n     */\r\n    innerText: {\r\n      type: String,\r\n      default: '向右拖动滑块验证'\r\n    },\r\n    /**\r\n     * 验证成功的文本\r\n     */\r\n    sliderSuccessInnerText: {\r\n      type: String,\r\n      default: '验证成功！'\r\n    },\r\n    /**\r\n     * 滑块内部文字样式\r\n     */\r\n    innerTextStyle: {\r\n      type: Object as PropType<StyleValue>,\r\n      default: () => ({})\r\n    },\r\n    /**\r\n     * 滑块样式\r\n     */\r\n    sliderStyle: {\r\n      type: Object as PropType<StyleValue>,\r\n      default: () => ({})\r\n    },\r\n    /**\r\n     * 滑块成功的样式\r\n     */\r\n    sliderSuccessStyle: {\r\n      type: Object as PropType<StyleValue>,\r\n      default: () => ({})\r\n    },\r\n  },\r\n  expose: ['slideValidatorStatus'],\r\n  setup(props) {\r\n\r\n    /**\r\n     * 容器宽度\r\n     */\r\n    const containerWidth = useLengthUnit(props.width.toString());\r\n    /**\r\n     * 容器高度\r\n     */\r\n    const containerHeight = useLengthUnit(props.height.toString());\r\n    /**\r\n     * 合并滑块的样式\r\n     */\r\n    const mergeSliderStyle: StyleValue = { width: containerHeight.value, height: containerHeight.value, ...props.sliderStyle };\r\n\r\n    /**\r\n    * 滑块dom\r\n    */\r\n    const sliderRef: Ref<HTMLDivElement | null> = ref(null);\r\n    /**\r\n     * 容器dom\r\n     */\r\n    const sliderContainerRef: Ref<HTMLDivElement | null> = ref(null);\r\n    /**\r\n     * 滑块内部dom\r\n     */\r\n    const sliderInnerTextRef: Ref<HTMLDivElement | null> = ref(null);\r\n    /**\r\n     * 成功遮罩dom\r\n     */\r\n    const sliderSuccessBgRef: Ref<HTMLDivElement | null> = ref(null);\r\n    /**\r\n     * 当前鼠标点击状态\r\n     */\r\n    const mouseClickState = ref(false);\r\n    /**\r\n     * 是否成功\r\n     */\r\n    const confirmSuccess = ref(false);\r\n    /**\r\n     * 滑块距离左侧的距离\r\n     */\r\n    const sliderStartXPosition = ref(0);\r\n    /**\r\n     * 移动距离\r\n     */\r\n    const sliderDistance = ref(0);\r\n\r\n    onMounted(() => {\r\n      sliderContainerRef.value = document.getElementsByClassName('vue-login_slide-container')[0] as HTMLDivElement;\r\n      sliderRef.value = document.getElementsByClassName('vue-login_slider-container')[0] as HTMLDivElement;\r\n      sliderRef.value.addEventListener('mousedown', sliderMouseDown);\r\n      sliderRef.value.addEventListener('mouseup', mouseUpFn);\r\n      sliderInnerTextRef.value = document.getElementsByClassName('vue-login_inner-container')[0] as HTMLDivElement;\r\n      sliderSuccessBgRef.value = document.getElementsByClassName('vue-login_slider-success-bg')[0] as HTMLDivElement;\r\n    })\r\n\r\n    /**\r\n       * 鼠标点击下来\r\n       */\r\n    const sliderMouseDown = (e: MouseEvent) => {\r\n      if (!confirmSuccess.value) {\r\n        e.preventDefault && e.preventDefault();   //阻止文字选中等 浏览器默认事件\r\n        mouseClickState.value = true;\r\n        sliderStartXPosition.value = e.clientX;\r\n        // 绑定事件\r\n        document.addEventListener('mousemove', mouseMoveFn);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * 鼠标抬起\r\n     */\r\n    const mouseUpFn = (e: MouseEvent) => {\r\n      if (!confirmSuccess.value) {\r\n        e.preventDefault && e.preventDefault();   //阻止文字选中等 浏览器默认事件\r\n        mouseClickState.value = false;\r\n        sliderStartXPosition.value = 0;\r\n        sliderRef.value!.style.left = 0 + 'px';\r\n        sliderSuccessBgRef.value!.style.width = 0 + 'px';\r\n        // 解除事件\r\n        document.removeEventListener('mousemove', mouseMoveFn);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 成功函数\r\n     * \r\n     */\r\n    const successFunction = () => {\r\n      confirmSuccess.value = true;\r\n      sliderInnerTextRef.value!.innerText = props.sliderSuccessInnerText;\r\n      const resWidth = parseInt(sliderContainerRef.value!.style.width) - parseInt(sliderRef.value!.style.width) + 'px';\r\n\r\n      sliderRef.value!.style.left = resWidth;\r\n      sliderSuccessBgRef.value!.style.width = resWidth;\r\n      // 赋值成功的样式\r\n      if (props.sliderSuccessStyle) {\r\n        for (const p in props.sliderSuccessStyle) {\r\n          if (Object.prototype.hasOwnProperty.call(props.sliderSuccessStyle, p)) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            sliderRef.value!.style[p as any] = (props.sliderSuccessStyle as any)[p]\r\n          }\r\n        }\r\n      }\r\n      // 解除事件\r\n      document.removeEventListener('mousemove', mouseMoveFn);\r\n    }\r\n    /**\r\n     * 鼠标移动事件\r\n     */\r\n    const mouseMoveFn = (e: MouseEvent) => {\r\n      if (mouseClickState.value) {\r\n        sliderDistance.value = e.clientX - sliderStartXPosition.value;\r\n        const maxSliderWidth = parseInt(sliderContainerRef.value!.style.width) - parseInt(sliderRef.value!.style.width)\r\n        if (sliderDistance.value > 0 && sliderDistance.value <= maxSliderWidth) {\r\n          sliderRef.value!.style.left = sliderDistance.value + 'px';\r\n          sliderSuccessBgRef.value!.style.width = sliderDistance.value + 'px';\r\n        } else if (sliderDistance.value > maxSliderWidth) {\r\n          successFunction();\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      slideValidatorStatus: confirmSuccess,\r\n      containerWidth,\r\n      containerHeight,\r\n      mergeSliderStyle\r\n    }\r\n  },\r\n  render() {\r\n    return h('div', { class: 'vue-login_slide-container', style: { width: this.containerWidth, height: this.containerHeight, backgroundColor: this.backgroundColor } }, [\r\n      h('div', { class: 'vue-login_slider-success-bg', style: { backgroundColor: this.successBgColor } }),\r\n      h('div', { class: 'vue-login_slider-container', style: (this.mergeSliderStyle as CSSProperties) }),\r\n      h('div', { class: 'vue-login_inner-container', style: this.innerTextStyle as CSSProperties }, this.innerText as string),\r\n    ])\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["useLengthUnit","lengthStr","extraUnit","computed","test","toString","some","ca","endsWith","parseInt","useValidateIsColor","val","install","defineComponent","name","props","backgroundColor","type","String","validator","default","successBgColor","width","Number","height","innerText","sliderSuccessInnerText","innerTextStyle","Object","sliderStyle","sliderSuccessStyle","expose","setup","containerWidth","containerHeight","mergeSliderStyle","value","sliderRef","ref","sliderContainerRef","sliderInnerTextRef","sliderSuccessBgRef","mouseClickState","confirmSuccess","sliderStartXPosition","sliderDistance","onMounted","document","getElementsByClassName","addEventListener","sliderMouseDown","mouseUpFn","e","preventDefault","clientX","mouseMoveFn","style","left","removeEventListener","maxSliderWidth","resWidth","p","prototype","hasOwnProperty","call","successFunction","slideValidatorStatus","render","h","class","this"],"mappings":"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"}